// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Quizest.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Entities.Models.SQL.AnswerInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountOfCorrectQuestions")
                        .HasColumnType("int");

                    b.Property<float?>("Mark")
                        .HasColumnType("real");

                    b.Property<Guid?>("QuizInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("SpentTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("AnswerInfo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("004efcbd-4197-4975-9e9e-1feb02c8d432"),
                            AmountOfCorrectQuestions = 1,
                            Mark = 5f,
                            QuizInfoId = new Guid("004efcbd-4197-4975-9e9e-1feb02c8d430"),
                            SpentTime = new TimeSpan(0, 1, 10, 0, 0),
                            UserId = new Guid("004efcbd-4197-4975-9e9e-1feb02c8d429")
                        });
                });

            modelBuilder.Entity("Entities.Models.SQL.QuizInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AmountOfLikes")
                        .HasColumnType("int");

                    b.Property<int?>("AmountOfPasses")
                        .HasColumnType("int");

                    b.Property<int>("AmountOfQuestions")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Complexity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<bool?>("IsLiked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("QuizInfo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("004efcbd-4197-4975-9e9e-1feb02c8d430"),
                            AmountOfLikes = 0,
                            AmountOfPasses = 0,
                            AmountOfQuestions = 1,
                            ClosedAt = new DateTime(2020, 11, 20, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Complexity = 0,
                            CreatedAt = new DateTime(2020, 11, 19, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "It is just an initial quiz for seeding",
                            Duration = new TimeSpan(0, 0, 1, 20, 0),
                            IsLiked = false,
                            Name = "Initial Quiz",
                            OwnerId = new Guid("004efcbd-4197-4975-9e9e-1feb02c8d428"),
                            UpdatedAt = new DateTime(2020, 11, 20, 1, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.Models.SQL.QuizInfoUser", b =>
                {
                    b.Property<Guid>("QuizInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuizInfoId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizInfoUser");

                    b.HasData(
                        new
                        {
                            QuizInfoId = new Guid("004efcbd-4197-4975-9e9e-1feb02c8d430"),
                            UserId = new Guid("004efcbd-4197-4975-9e9e-1feb02c8d429"),
                            Id = new Guid("004efcbd-4197-4975-9e9e-1feb02c8d431")
                        });
                });

            modelBuilder.Entity("Entities.Models.SQL.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("004efcbd-4197-4975-9e9e-1feb02c8d429"),
                            AvatarPath = "",
                            Email = "initial_email@example.com",
                            FirstName = "InititalFirstName",
                            LastName = "InititalLastName",
                            Role = 0
                        },
                        new
                        {
                            Id = new Guid("004efcbd-4197-4975-9e9e-1feb02c8d428"),
                            AvatarPath = "",
                            Email = "owner_email@example.com",
                            FirstName = "OwnerFirstName",
                            LastName = "OwnerLastName",
                            Role = 0
                        });
                });

            modelBuilder.Entity("Entities.Models.SQL.AnswerInfo", b =>
                {
                    b.HasOne("Entities.Models.SQL.QuizInfo", "QuizInfo")
                        .WithMany()
                        .HasForeignKey("QuizInfoId");

                    b.HasOne("Entities.Models.SQL.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("QuizInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.SQL.QuizInfo", b =>
                {
                    b.HasOne("Entities.Models.SQL.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Entities.Models.SQL.QuizInfoUser", b =>
                {
                    b.HasOne("Entities.Models.SQL.QuizInfo", "QuizInfo")
                        .WithMany("QuizInfoUsers")
                        .HasForeignKey("QuizInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.SQL.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.SQL.QuizInfo", b =>
                {
                    b.Navigation("QuizInfoUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
